import os
import sys


def read_config(file_name):
    """
         Функция, которая читает файл конфигурации и
         преобразует все его символы в ключи и значения словаря.
     """
    # проверяем, существует ли файл
    if not os.path.exists(file_name):
        print(f'Файл {file_name} не найден.')
        return {}

    # проверяем доступен ли файл для чтения и содержит ли допустимые данные
    try:
        # with - контекстный менеджер. С помощью него открываем, читаем, закрываем файл.
        with open(file_name, 'r') as file:
            """
                1. проходим циклом по всем текстовым строчкам в файле.
                2. методом strip() убираем из каждой текстовой строчки все интервалы
                (пробелы, табуляция, символы пустых строк) вначале и в конце.
                3. метод split() разбиваем каждую текстовую строчку файла на части
                в виде строк в том месте где есть разделительный символ '=' каждая часть
                становится элементом списка. Список преобразуем в словарь.
            """
            return dict(line.strip().split('=') for line in file)
    except Exception as e:
        print(f'Произошла ошибка при чтении файла {file_name}: {str(e)}')
        return {}


def process_text(file_name, config):
    """
        Функция, которая преобразует текст файла по словарю из файла конфигурации.
    """
    if not os.path.exists(file_name):
        print(f"Файл {file_name} не найден.")
        return []

    try:
        # Открываем текстовый файл
        with open(file_name, 'r') as file:
            # Создаём список, добавляя в него элементы в виде строк, которые мы получаем
            # из текстовых строчек файла. Присваиваем списку имя переменной.
            lines = [line.strip() for line in file]
    except Exception as e:
        print(f"Произошла ошибка при чтении файла {file_name}: {str(e)}")
        return []

    # создаём список замен.
    replacements = []

    # проходим циклом по словарю, который мы получили из файла конфигурации.
    for key, value in config.items():
        """
        1. проходим циклом по списку в котором содержатся элементы в виде строк,
        полученных из текстовых строчек текстового файла.
        2. все вхождения в строку имеющие значение схожее с одним из ключей словаря
        заменяем значением этого ключа.
        3. для замены значений с помощью метода replace() в качестве первого аргумента
        вводим 'заменяемый текст', а в качестве второго 'приходящий ему на смену'.
        """
        lines = [line.replace(key, value) for line in lines]

        # Добавляем в список замен кортежи, состоящие из ключа, значения, количества заменённых значений.
        count = 0
        for line in lines:
            count += line.count(value)
        replacements.append((key, value, count))

        """
            1. проводим сортировку изменённого списка по наибольшему количеству
            замененных строковых символов.
            2. lambda-функция принимает один аргумент line, который представляет
            собой элемент списка lines.
            Lambda-функция вычисляет ключ сортировки для каждой строки line.
            Ключ сортировки - это число, которое определяет порядок сортировки.
            3. Вычисляем сумму значений rep[2] для всех элементов rep в списке replacements,
            где rep[1] содержится в строке line.
            rep[2] - это количество замен, сделанных для значения rep[1].
            4. reverse=True - этот аргумент говорит функции sort
            сортировать список в обратном порядке.
        """
    lines.sort(key=lambda line: sum(line.count(rep[1]) for rep in replacements), reverse=True)

    # Возвращаем итоговую строку. Для этого объединением элементы списка lines в одну строку.
    # В качестве разделителя используем '\n'.
    results = '\n'.join(lines)
    return lines, replacements, results
    # return '\n'.join(lines)

